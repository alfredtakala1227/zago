/*************************************************/
/* Colors
/*************************************************/

$grey : #e6e6e6;
$lightgrey : #f7f7f7;
$darkgrey: #040707;
$tumblrgrey: #555656; 

$blue: #00ffff;
$yellow: #ffff00;
$pink: #ff00ff;
$green: #00ff00;
$red: red;

$lightblue : #5ad3cf;

$menuButtonColors: $blue, $yellow, $pink, $green;

/*************************************************/
/* Speeds
/*************************************************/

$slowSpeed: .7s;
$normalSpeed: .5s;
$fastSpeed: .3s;

$primaryEase: ease-out;


/*************************************************/
/* Functions
/*************************************************/

@function vunit($input, $width, $height){
  @if unit($width) != px or unit($height) != px {
    @error "@function vunit() dimensions should contain a px unit."
  }
  
  // Store $input unit
  $unit: unit($input);
  // Remove unit from $input and convert to ratio
  $ratio: $input / ($input * 0 + 1) / 100;
  // Calc and store return values
  $widthVal: floor($width * $ratio);
  $heightVal: floor($height * $ratio);
  
  $isPortrait: $width < $height;
  
  @if $unit == vw { @return $widthVal; }
  @else if $unit == vh { @return $heightVal; }
  
  @else if $unit == vmax {
    @if $isPortrait { @return $heightVal; }
    @else { @return $widthVal; }
  }
  
  @else if $unit == vmin {
    @if $isPortrait { @return $widthVal; }
    @else { @return $heightVal; }
  }
}

/*************************************************/
/* Mixins
/*************************************************/

@mixin breakpoint($point, $max : false) {
  @if $point == oversize { @media (min-width: 2200px) { @content; } }
  @else if $point == superwide { @media (min-width: 1800px) { @content; } }
  @else if $point == wide { @media (min-width: 1400px) { @content; } }
  @else if $point == large { @media (min-width: 1200px) { @content; } }
  @else if $point == desktop { @media (min-width: 992px) { @content; } }
  @else if $point == tablet { @media (min-width: 768px) { @content; } }
  @else if $point == smallTablet { @media (min-width: 640px) { @content; } }
  @else if $point == mobile { @media (min-width: 480px) { @content; } }
  @else if $point == mini { @media (min-width: 320px) { @content; } }
  @else if $point == landscape { @media (orientation : landscape) { @content; } }
  @else if $max == true { @media (max-width: $point) { @content; } }
  @else { @media (min-width: $point) { @content; } }
}

@mixin breakheight($point, $min : false) {
  @if $point == tiny { @media (max-height: 400px) { @content; } }
  @if $point == small { @media (max-height: 640px) { @content; } }
  @if $point == large { @media (max-height: 767px) { @content; } }
  @if $point == bigscreen { @media (min-height: 768px) { @content; } }
  @else if $min == true { @media (min-height: $point) { @content; } }
  @else { @media (max-height: $point) { @content; } }
}

@mixin columns($count : 0, $gap : 0px, $rule : 0) {
  column-count: $count;
  column-gap: $gap;
  column-rule: $rule;
}

@mixin buggyfill($values) {
  content: 'viewport-units-buggyfill; ' + $values;
}

@mixin viewport($property, $value){
  
  // Check that the $value has a unit
  @if unitless($value){
    // Throw error if the $value is unitless
    @error "Viewport values include a specified unit. Please check your input [" + $value + "]";
  } @else {
    
    $unit : unit($value);
    $units: (vw, vh, vmin, vmax);
    
    // Check that the unit is a V-unit
    @if index($units, $unit) == null {
      // Throw error if a V-unit was not used
      @error "Viewport values include a specified V-unit. Please check your input [" + $value + "]";
    
    // V-Unit to PX logic
    } @else {
  
      // iPad with landscape orientation.
      @media all and (device-width: 768px) and
        (device-height: 1024px) and (orientation:portrait){
          #{$property}: vunit($value, 768px, 1024px);
      }
       
      // iPad with landscape orientation.
      @media all and (device-width: 768px) and
        (device-height: 1024px) and (orientation:landscape){
        #{$property}: vunit($value, 1024px, 768px);
      }
      
      // Set Base Value
      #{$property}: $value;

    }
  }
}









/*************************************************/
